@page "/chatroom"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;

@using System
@using System.IO
@using Microsoft.AspNetCore.Hosting

@using Microsoft.Extensions.Logging
@inject IWebHostEnvironment Environment

<div class="container @ocultar">
    <div class="video-container" id="video-container">
        <div class="playback-animation" id="playback-animation">
            <svg class="playback-icons">
                <use class="hidden" href="#play-icon"></use>
                <use href="#pause"></use>
            </svg>
        </div>

        <video controls class="video" id="video" preload="metadata" @onclick="PlayClick">
            <source src="" type="video/mp4" />
        </video>

        <div class="video-controls hidden" id="video-controls">
            <div class="video-progress">
                <progress id="progress-bar" value="0" min="0"></progress>
                <input class="seek" id="seek" value="0" min="0" type="range" step="1" @onclick="SkipAhead">
                <div class="seek-tooltip" id="seek-tooltip">00:00</div>
            </div>

            <div class="bottom-controls">
                <div class="left-controls">
                    <button data-title="Play (k)" id="play" @onclick="PlayClick">
                        <svg class="playback-icons">
                            <use href="#play-icon"></use>
                            <use class="hidden" href="#pause"></use>
                        </svg>
                    </button>

                    <div class="volume-controls">
                        <button data-title="Mute (m)" class="volume-button" id="volume-button">
                            <svg>
                                <use class="hidden" href="#volume-mute"></use>
                                <use class="hidden" href="#volume-low"></use>
                                <use href="#volume-high"></use>
                            </svg>
                        </button>

                        <input class="volume" id="volume" value="1"
                               data-mute="0.5" type="range" max="1" min="0" step="0.01">
                    </div>

                    <div class="time">
                        <time id="time-elapsed">00:00</time>
                        <span> / </span>
                        <time id="duration">00:00</time>
                    </div>
                </div>

                <div class="right-controls">
                    <button data-title="PIP (p)" class="pip-button" id="pip-button">
                        <svg>
                            <use href="#pip"></use>
                        </svg>
                    </button>
                    <button data-title="Full screen (f)" class="fullscreen-button" id="fullscreen-button">
                        <svg>
                            <use href="#fullscreen"></use>
                            <use href="#fullscreen-exit" class="hidden"></use>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
<svg style="display: none">
    <defs>
        <symbol id="pause" viewBox="0 0 24 24">
            <path d="M14.016 5.016h3.984v13.969h-3.984v-13.969zM6 18.984v-13.969h3.984v13.969h-3.984z"></path>
        </symbol>

        <symbol id="play-icon" viewBox="0 0 24 24">
            <path d="M8.016 5.016l10.969 6.984-10.969 6.984v-13.969z"></path>
        </symbol>

        <symbol id="volume-high" viewBox="0 0 24 24">
            <path d="M14.016 3.234q3.047 0.656 5.016 3.117t1.969 5.648-1.969 5.648-5.016 3.117v-2.063q2.203-0.656 3.586-2.484t1.383-4.219-1.383-4.219-3.586-2.484v-2.063zM16.5 12q0 2.813-2.484 4.031v-8.063q1.031 0.516 1.758 1.688t0.727 2.344zM3 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6z"></path>
        </symbol>

        <symbol id="volume-low" viewBox="0 0 24 24">
            <path d="M5.016 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6zM18.516 12q0 2.766-2.531 4.031v-8.063q1.031 0.516 1.781 1.711t0.75 2.32z"></path>
        </symbol>

        <symbol id="volume-mute" viewBox="0 0 24 24">
            <path d="M12 3.984v4.219l-2.109-2.109zM4.266 3l16.734 16.734-1.266 1.266-2.063-2.063q-1.547 1.313-3.656 1.828v-2.063q1.172-0.328 2.25-1.172l-4.266-4.266v6.75l-5.016-5.016h-3.984v-6h4.734l-4.734-4.734zM18.984 12q0-2.391-1.383-4.219t-3.586-2.484v-2.063q3.047 0.656 5.016 3.117t1.969 5.648q0 2.203-1.031 4.172l-1.5-1.547q0.516-1.266 0.516-2.625zM16.5 12q0 0.422-0.047 0.609l-2.438-2.438v-2.203q1.031 0.516 1.758 1.688t0.727 2.344z"></path>
        </symbol>

        <symbol id="fullscreen" viewBox="0 0 24 24">
            <path d="M14.016 5.016h4.969v4.969h-1.969v-3h-3v-1.969zM17.016 17.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 9.984v-4.969h4.969v1.969h-3v3h-1.969zM6.984 14.016v3h3v1.969h-4.969v-4.969h1.969z"></path>
        </symbol>

        <symbol id="fullscreen-exit" viewBox="0 0 24 24">
            <path d="M15.984 8.016h3v1.969h-4.969v-4.969h1.969v3zM14.016 18.984v-4.969h4.969v1.969h-3v3h-1.969zM8.016 8.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 15.984v-1.969h4.969v4.969h-1.969v-3h-3z"></path>
        </symbol>

        <symbol id="pip" viewBox="0 0 24 24">
            <path d="M21 19.031v-14.063h-18v14.063h18zM23.016 18.984q0 0.797-0.609 1.406t-1.406 0.609h-18q-0.797 0-1.406-0.609t-0.609-1.406v-14.016q0-0.797 0.609-1.383t1.406-0.586h18q0.797 0 1.406 0.586t0.609 1.383v14.016zM18.984 11.016v6h-7.969v-6h7.969z"></path>
        </symbol>
    </defs>
</svg>


@if (!_isChatting)
{
    <p> Enter your name to start chatting:</p>

    <input type="text" maxlength="32" @bind="@_username" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>
    @*<input type="file" id="ruta" OnChange="LoadFiles"  multiple />*@
    <InputFile type="file" accept=".mp4" id="ruta" OnChange="LoadFiles" multiple />


    <hr />


    // Error messages
    @if (_message != null)
    {
        <div class="invalid-feedback">@_message</div>
        <small id="emailHelp" class="form-text text-muted">@_message</small>
    }
}
else
{


    // banner to show current user
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@_username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>
    // display messages
    <div id="scrollbox">
        @foreach (var item in _messages)
        {
            @if (item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@_newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => SendAsync(_newMessage))">Send</button>
    </div>
}
@code {

    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    VideoManager video;

    // flag to indicate chat status
    public bool _isChatting = false;
    public int videosIguales = 0;

    // name of the user who will be chatting
    private string _username;

    // on-screen message
    private string _message;

    // new message input
    private string _newMessage;

    // list of messages in chat
    private List<Message> _messages = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    private List<IBrowserFile> loadedFiles = new();
    private long maxFileSize = 1024 * 15;
    private int maxAllowedFiles = 1;
    private bool isLoading;

    public string ocultar => _isChatting ? "" : "hidden";


    public async Task Chat()
    {
        // check username is valid
        if (string.IsNullOrWhiteSpace(_username))
        {
            _message = "Please enter a name";
            return;
        }

        if (loadedFiles.Count == 0)
        {
            _message = "Please enter a file";
            return;
        }

        await video.Iniciar();

        try
        {
            // Start chatting and force refresh UI.
            _isChatting = true;
            await Task.Delay(1);

            // remove old messages if any
            _messages.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string, string>("Broadcast", BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"[Notice] {_username} joined chat room.");
        }
        catch (Exception e)
        {
            _message = $"ERROR: Failed to start chat client: {e.Message}";
            _isChatting = false;
        }
    }

    private void BroadcastMessage(string name, string message)
    {
        bool isMine = name.Equals(_username, StringComparison.OrdinalIgnoreCase);
        int cantidad = _messages.Count() - 1;

        if (message == "##getFile")
            Task.Run(() => SendAsync("!!" + loadedFiles[0].Name));
        if (message == "##play")
            Task.Run(video.PlayClick);

        if (message.Contains("##skip"))
            Task.Run(() => video.SkipTo(message.Remove(0, 6)));


        _messages.Add(new Message(name, message, isMine));

        if (message.Contains("!!"))
        {
            if (_messages[cantidad].Body == _messages[cantidad + 1].Body)
            {
                videosIguales = 1;
                Task.Run(video.PlayClick);
            }
            else
                _message = "Los video no son iguales";
        }
        // Inform blazor the UI needs updating
        StateHasChanged();
    }

    private async Task DisconnectAsync()
    {
        if (_isChatting)
        {
            await SendAsync($"[Notice] {_username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            _isChatting = false;
        }
    }

    private async Task SendAsync(string message)
    {
        if (_isChatting && !string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _username, message);
            _newMessage = string.Empty;
        }
    }

    private class Message
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        video = new VideoManager(await JSRuntime.InvokeAsync<IJSObjectReference>
    ("import", "./scripts/jsVideo.js"));

    }

    public async Task PlayClick() ///Controlar esto para enviar
    {
        if (videosIguales == 1)
            await SendAsync("##play");
        else if (videosIguales == 0)
            await SendAsync("##getFile");
    }

    public async Task SkipAhead()
    {
        int time = (await video.GetCurrentTime());
        await SendAsync("##skip" + time.ToString());
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        loadedFiles.Clear();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            try
            {
                loadedFiles.Add(file);

                var trustedFileNameForFileStorage = Path.GetRandomFileName();
                var path = Path.Combine(Environment.ContentRootPath,
                Environment.EnvironmentName, "unsafe_uploads",
                trustedFileNameForFileStorage);

                await using FileStream fs = new(path, FileMode.Create);
                await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
            }
            catch (Exception ex)
            {
                Console.WriteLine("File: {Filename} Error: {Error}",
                file.Name, ex.Message);
            }
        }

        isLoading = false;
    }
}
