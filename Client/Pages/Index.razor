@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IDisposable

@if (estado == 1)
{
    <p> Enter your name to start chatting:</p>
    <input type="text" maxlength="32" @bind="@userInput" @onkeyup="@NextEnter" />
    <button class="btn-outline-primary" type="button" @onclick="@Next" ><span class="oi oi-chat" aria-hidden="true"></span> Start!</button>
    @if (errorMessage != null)
    {
        <div class="invalid-feedback">@errorMessage</div>
        <small id="emailHelp" class="form-text text-muted">@errorMessage</small>
    }
}
else if (estado == 2)
{
    <input type="file" accept=".mp4" id="ruta" name="ruta" @bind-value="@loadedFile" @oninput="FileChange" />
    <button class="btn-outline-primary" type="button" @onclick="Verify"><span class="oi oi-chat" aria-hidden="true"></span> Verificar</button>

    <div class="row">
        <div class="col col-7">
            <div class="container">
                <div class="video-container" id="video-container">
                    <div class="playback-animation" id="playback-animation">
                        <svg class="playback-icons">
                            <use class="hidden" href="#play-icon"></use>
                            <use href="#pause"></use>
                        </svg>
                    </div>

                    <video class="video" id="video" con preload="metadata" @onclick="PlayClick">
                        <source src="" type="video/mp4" />
                    </video>
                    <div id="ContenedorControles" class="controls-box" style=" background-image:none">
                        <div class="video-controls hidden" id="video-controls">
                            <div class="video-progress">
                                <progress id="progress-bar" value="0" min="0"></progress>
                                <input class="seek" id="seek" value="0" min="0" type="range" step="1" @onclick="SkipAhead">
                                <div class="seek-tooltip" id="seek-tooltip">00:00</div>
                            </div>

                            <div class="bottom-controls">
                                <div class="left-controls">
                                    <button data-title="Play (k)" id="play" @onclick="PlayClick">
                                        <svg class="playback-icons">
                                            <use href="#play-icon"></use>
                                            <use class="hidden" href="#pause"></use>
                                        </svg>
                                    </button>

                                    <div class="volume-controls">
                                        <button data-title="Mute (m)" class="volume-button" id="volume-button">
                                            <svg>
                                                <use class="hidden" href="#volume-mute"></use>
                                                <use class="hidden" href="#volume-low"></use>
                                                <use href="#volume-high"></use>
                                            </svg>
                                        </button>

                                        <input class="volume" id="volume" value="1"
                                               data-mute="0.5" type="range" max="1" min="0" step="0.01">
                                    </div>

                                    <div class="time">
                                        <time id="time-elapsed">00:00</time>
                                        <span> / </span>
                                        <time id="duration">00:00</time>
                                    </div>
                                </div>

                                <div class="right-controls">
                                    <button data-title="PIP (p)" class="pip-button" id="pip-button">
                                        <svg>
                                            <use href="#pip"></use>
                                        </svg>
                                    </button>
                                    <button data-title="Full screen (f)" class="fullscreen-button" id="fullscreen-button">
                                        <svg>
                                            <use href="#fullscreen"></use>
                                            <use href="#fullscreen-exit" class="hidden"></use>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <svg style="display: none">
                <defs>
                    <symbol id="pause" viewBox="0 0 24 24">
                        <path d="M14.016 5.016h3.984v13.969h-3.984v-13.969zM6 18.984v-13.969h3.984v13.969h-3.984z"></path>
                    </symbol>

                    <symbol id="play-icon" viewBox="0 0 24 24">
                        <path d="M8.016 5.016l10.969 6.984-10.969 6.984v-13.969z"></path>
                    </symbol>

                    <symbol id="volume-high" viewBox="0 0 24 24">
                        <path d="M14.016 3.234q3.047 0.656 5.016 3.117t1.969 5.648-1.969 5.648-5.016 3.117v-2.063q2.203-0.656 3.586-2.484t1.383-4.219-1.383-4.219-3.586-2.484v-2.063zM16.5 12q0 2.813-2.484 4.031v-8.063q1.031 0.516 1.758 1.688t0.727 2.344zM3 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6z"></path>
                    </symbol>

                    <symbol id="volume-low" viewBox="0 0 24 24">
                        <path d="M5.016 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6zM18.516 12q0 2.766-2.531 4.031v-8.063q1.031 0.516 1.781 1.711t0.75 2.32z"></path>
                    </symbol>

                    <symbol id="volume-mute" viewBox="0 0 24 24">
                        <path d="M12 3.984v4.219l-2.109-2.109zM4.266 3l16.734 16.734-1.266 1.266-2.063-2.063q-1.547 1.313-3.656 1.828v-2.063q1.172-0.328 2.25-1.172l-4.266-4.266v6.75l-5.016-5.016h-3.984v-6h4.734l-4.734-4.734zM18.984 12q0-2.391-1.383-4.219t-3.586-2.484v-2.063q3.047 0.656 5.016 3.117t1.969 5.648q0 2.203-1.031 4.172l-1.5-1.547q0.516-1.266 0.516-2.625zM16.5 12q0 0.422-0.047 0.609l-2.438-2.438v-2.203q1.031 0.516 1.758 1.688t0.727 2.344z"></path>
                    </symbol>

                    <symbol id="fullscreen" viewBox="0 0 24 24">
                        <path d="M14.016 5.016h4.969v4.969h-1.969v-3h-3v-1.969zM17.016 17.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 9.984v-4.969h4.969v1.969h-3v3h-1.969zM6.984 14.016v3h3v1.969h-4.969v-4.969h1.969z"></path>
                    </symbol>

                    <symbol id="fullscreen-exit" viewBox="0 0 24 24">
                        <path d="M15.984 8.016h3v1.969h-4.969v-4.969h1.969v3zM14.016 18.984v-4.969h4.969v1.969h-3v3h-1.969zM8.016 8.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 15.984v-1.969h4.969v4.969h-1.969v-3h-3z"></path>
                    </symbol>

                    <symbol id="pip" viewBox="0 0 24 24">
                        <path d="M21 19.031v-14.063h-18v14.063h18zM23.016 18.984q0 0.797-0.609 1.406t-1.406 0.609h-18q-0.797 0-1.406-0.609t-0.609-1.406v-14.016q0-0.797 0.609-1.383t1.406-0.586h18q0.797 0 1.406 0.586t0.609 1.383v14.016zM18.984 11.016v6h-7.969v-6h7.969z"></path>
                    </symbol>
                </defs>
            </svg>
        </div>
        <div class="col col-5">
            <div class="alert alert-secondary" role="alert">
                <span class="oi oi-person mr-2" aria-hidden="true"></span>
                <span>You are connected as <b>@userInput</b></span>
                <button class="btn btn-sm btn-warning ml-md-auto" @onclick="DisconnectAsync">Disconnect</button>
            </div>
            <hr>
            <div id="scrollbox " class="overflow-auto" style="height:250px;">
                @foreach (var item in Enumerable.Reverse(messages).ToList())
                {
                    @if (item.IsNotice)
                    {
                        <div class="alert alert-info">@item.Body</div>
                    }
                    else
                    {
                        <div class="@item.CSS">
                            <div class="user">@item.Username</div>
                            <div class="msg">@item.Body</div>
                        </div>
                    }
                }
            </div>

            <div class="form-group">
                <label>
                    Message:
                    <input @bind="messageInput" size="25" @onkeyup="KeyPress" />
                </label>
                <button class="btn btn-outline-primary" @onclick="Send" disabled="@(!IsConnected)">Send</button>
            </div>

        </div>

    </div>
}

@code {
    [Inject]
    public IJSRuntime JSRuntime { get; set; }

    public int estado = 1;
    private string userInput;
    private string messageInput;
    private string errorMessage;

    private HubConnection hubConnection;
    private List<Message> messages = new List<Message>();
    public string loadedFile;

    VideoManager video;
    public string ocultar => loadedFile != null ? "" : "hidden";
    public string disabled => video != null ? "" : "disabled";
    public bool verificado = false;
    public int videosIguales = 0;

    protected override async Task OnInitializedAsync()
    {

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", ReceiveMessage);

        await hubConnection.StartAsync();

    }

    async Task Send()
    {
        if (string.IsNullOrWhiteSpace(messageInput))
            return;

        await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        messageInput = "";
    }


    async Task Send(string message)
    {
        await hubConnection.SendAsync("SendMessage", userInput, message);
    }

    public void Next()
    {
        if (!string.IsNullOrWhiteSpace(userInput))
            estado = 2;
        else
            errorMessage = "Please enter a name";
    }

    private void NextEnter(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            Next();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (estado == 2 && video == null)
            video = new VideoManager(await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./scripts/jsVideo.js"));
    }

    public async Task Charge()
    {
        if (loadedFile != null)
            await video.Iniciar();
        else
            await Send("Debe seleccionar un video");
    }

    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    private void ReceiveMessage(string name, string message)
    {
        if (message == "##play")
            Task.Run(video.PlayClick);
        if (message == "##pause")
            Task.Run(video.Pause);
        if (message == "##Videos verificados")
        {
            videosIguales = 1;
            verificado = true;
        }
        else if (message.Contains("##skip"))
            Task.Run(() => video.SkipTo(message.Remove(0, 6)));
        if (message.Contains("!!") && name != userInput)
        {
            if (video.Name == message.Remove(0, 2))
            {
                videosIguales = 1;
                Task.Run(() => Send("##Videos verificados"));
            }
            else
            {
                videosIguales = 0;
                Task.Run(() => Send("Videos no son iguales"));
            }
        }
        messages.Add(new Message(name, message, name.Equals(userInput, StringComparison.OrdinalIgnoreCase)));
        StateHasChanged();

    }

    public async Task PlayClick()
    {
        if (!verificado)
            await Send("No ha verificado el video");
        else if (videosIguales == 0)
            await Send("Los videos no son iguales");
        else if (videosIguales == 1)
            await Send("##play");
    }

    public async Task VerificarVideo()
    {
        if (videosIguales == 0)
            await Send("Los videos no son iguales");
        else if (videosIguales == 1)
            await Send("##play");
    }

    public async Task SkipAhead()
    {
        if (!verificado)
            await Send("No ha verificado el video");
        else if (videosIguales == 0)
            await Send("Los videos no son iguales");
        else if (videosIguales == 1)
        {
            int time = (await video.GetCurrentTime());
            await Send("##skip" + time.ToString());
        }
    }

    public void Dispose()
    {
        _ = hubConnection?.DisposeAsync();
    }

    private void FileChange()
    {
        verificado = false;
        videosIguales = 0;
        Task.Run(video.Reload);
    }

    private async Task Verify()
    {
        if (loadedFile == null)
            await Send("Debe elegir el video");
        else
        {
            await video.GetName();
            verificado = true;
            await Send("!!" + video.Name);
        }
    }

    private async Task KeyPress(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
            await Send();
    }

    private async Task DisconnectAsync()
    {
        //await Send($"[Notice] {userInput} left chat room.");

        //await hubConnection.StopAsync();
        //await hubConnection.DisposeAsync();

        //hubConnection = null;
    }

}